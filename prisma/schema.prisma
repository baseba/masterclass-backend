generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum SlotModality {
  group
  private
}

enum SlotStatus {
  candidate
  confirmed
  completed
  cancelled
}

enum ReservationStatus {
  pending
  confirmed
  cancelled
  attended
  no_show
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum MaterialType {
  guide
  slides
  exercises
  solutions
  recording
}

enum AccessPolicy {
  pre_class
  post_class
  no_show_restricted
}

enum Role {
  student
  professor
  admin
}

model Professor {
  id                 Int      @id @default(autoincrement())
  name               String
  email              String   @unique
  bio                String?
  profilePictureUrl  String?
  courses            Course[]
  slots              Slot[]
}

model Student {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  passwordHash String
  phone        String?
  reservations Reservation[]
  payments     Payment[]
}

model Course {
  id          Int      @id @default(autoincrement())
  professor   Professor @relation(fields: [professorId], references: [id])
  professorId Int
  // New temporary relation to User for migration to unified User model
  professorUser   User?    @relation("CourseProfessorUser", fields: [professorUserId], references: [id])
  professorUserId Int?
  title       String
  description String
  isActive    Boolean   @default(true)
  classes     Class[]
}

model Class {
  id          Int      @id @default(autoincrement())
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  title       String
  description String
  objectives  String?
  orderIndex  Int
  basePrice   Float
  slots       Slot[]
  materials   Material[]
}

model Slot {
  id           Int           @id @default(autoincrement())
  class        Class         @relation(fields: [classId], references: [id])
  classId      Int
  professor    Professor     @relation(fields: [professorId], references: [id])
  professorId  Int
  // Temporary relation to User
  professorUser   User?   @relation("SlotProfessorUser", fields: [professorUserId], references: [id])
  professorUserId Int?
  startTime    DateTime
  endTime      DateTime
  modality     SlotModality
  status       SlotStatus    @default(candidate)
  minStudents  Int?
  maxStudents  Int
  reservations Reservation[]
  @@index([professorId])
  @@index([classId])
  @@index([status])
}

model Reservation {
  id         Int              @id @default(autoincrement())
  student    Student          @relation(fields: [studentId], references: [id])
  studentId  Int
  // Temporary relation to User
  studentUser   User?   @relation("ReservationStudentUser", fields: [studentUserId], references: [id])
  studentUserId Int?
  slot       Slot             @relation(fields: [slotId], references: [id])
  slotId     Int
  status     ReservationStatus @default(pending)
  payment    Payment?         @relation(fields: [paymentId], references: [id])
  paymentId  Int?
  @@index([studentId])
  @@index([slotId])
  @@index([status])
}

model Payment {
  id                  Int           @id @default(autoincrement())
  student             Student       @relation(fields: [studentId], references: [id])
  studentId           Int
  // Temporary relation to User
  studentUser   User?   @relation("PaymentStudentUser", fields: [studentUserId], references: [id])
  studentUserId Int?
  amount              Float
  currency            String
  status              PaymentStatus @default(pending)
  paymentProvider     String
  transactionReference String
  createdAt           DateTime      @default(now())
  reservations        Reservation[]
  @@index([studentId])
  @@index([status])
}

model User {
  id                Int      @id @default(autoincrement())
  name              String
  email             String   @unique
  passwordHash      String?
  phone             String?
  role              Role     @default(student)
  bio               String?
  profilePictureUrl String?
  createdAt         DateTime @default(now())

  // Relations (match temporary relation names)
  coursesAsProfessor Course[] @relation("CourseProfessorUser")
  slotsAsProfessor   Slot[]   @relation("SlotProfessorUser")
  reservations       Reservation[] @relation("ReservationStudentUser")
  payments           Payment[]     @relation("PaymentStudentUser")
}

model Material {
  id           Int          @id @default(autoincrement())
  class        Class        @relation(fields: [classId], references: [id])
  classId      Int
  type         MaterialType
  url          String
  accessPolicy AccessPolicy
}

model Admin {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
}
